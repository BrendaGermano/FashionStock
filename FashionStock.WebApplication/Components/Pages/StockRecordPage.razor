@page "/stockrecords"
@inject IWebApi WebApi
@using FashionStock.Entities
@using FashionStock.WebApi.Models
@using MudBlazor
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar


<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudCard Class="elevation-4" Style="background-color: #E3F2FD;">
        <MudCardHeader Class="mud-card-header-custom">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="text-primary">Stock Records Management</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField @bind-Value="SearchString" Placeholder="Search..." Adornment="Adornment.Start" AdornmentIcon="Icons.Material.Filled.Search" Class="mb-3" />

            <MudTable Items="_stockRecords" Dense="true" Hover="true" Bordered="true" Class="mud-table-custom" Filter="FilterFunc">
                <HeaderContent>
                    <MudTh><MudText Typo="Typo.subtitle2" Class="text-primary">Product</MudText></MudTh>
                    <MudTh><MudText Typo="Typo.subtitle2" Class="text-primary">Record Type</MudText></MudTh>
                    <MudTh><MudText Typo="Typo.subtitle2" Class="text-primary">Quantity</MudText></MudTh>
                    <MudTh><MudText Typo="Typo.subtitle2" Class="text-primary">Created At</MudText></MudTh>
                    <MudTh><MudText Typo="Typo.subtitle2" Class="text-primary">Actions</MudText></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd><MudText Typo="Typo.body1">@GetProductName(context.ProductId) </MudText></MudTd>
                    <MudTd><MudText Typo="Typo.body1">@GetRecordTypeName(context.RecordTypeId)</MudText></MudTd>
                    <MudTd><MudText Typo="Typo.body1">@context.Quantity</MudText></MudTd>
                    <MudTd><MudText Typo="Typo.body1">@context.CreatedAt.ToString("g")</MudText></MudTd>
                    <MudTd>
                        <MudButton  Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.Edit"
                                   Style="background: linear-gradient(45deg, #64B5F6, #42A5F5); color: white; width: 90px;">Edit</MudButton>
                    </MudTd>
                    <MudTd>
                        <MudButton Variant="Variant.Outlined" Color="Color.Warning" StartIcon="@Icons.Material.Filled.Delete"
                                   Style="border-color: #FF9800; color: #FF9800; margin-left: 8px;">Delete</MudButton>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudTd ColSpan="5">
                        <MudText Typo="Typo.body1" Align="Align.Center" Class="text-secondary">No stock records available</MudText>
                    </MudTd>
                </NoRecordsContent>
            </MudTable>
        </MudCardContent>
        <MudCardActions Class="justify-end">
            <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Add"
                       Style="background: linear-gradient(45deg, #81C784, #66BB6A); color: white;" OnClick="NavigationAddStock">
                Add Stock Record
            </MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>




@code {

    private List<ProductModel> _products { get; set; } = new();
    private List<StockRecordModel> _stockRecords = new();
    private List<RecordTypeModel> _recordTypes { get; set; } = new();

    private bool IsLoading = true;
    private string SearchString = string.Empty;

    private MudTable<StockRecordModel> Table;

    protected override async Task OnParametersSetAsync()
    {
        _stockRecords = await WebApi.GetStockRecords();
        _products = await WebApi.GetProducts();
        _recordTypes = await WebApi.GetRecordTypes();
    }

    private void NavigationAddStock()
    {
        NavigationManager.NavigateTo($"addstockrecords", true);
    }

    private async Task LoadStockRecords()
    {
        IsLoading = true;
        try
        {
            _stockRecords = await WebApi.GetStockRecords();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading records: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private string GetProductName(long productId)
    {
        var product = _products.FirstOrDefault(p => p.Id == productId);
        if (!product.Name.Any())

            return"Unknown Product";
        return $"{product.Name}";


    }

    private string GetRecordTypeName(long recordId)
    {
        var recordType = _recordTypes.FirstOrDefault(rt => rt.Id == recordId);
        if (!recordType.Name.Any())

            return "Unknown Record Type";
        return $"{recordType.Name}";


    }

    private bool FilterFunc(StockRecordModel record)
    {
        if (string.IsNullOrWhiteSpace(SearchString))
            return true;
        return GetProductName(record.ProductId).Contains(SearchString, StringComparison.OrdinalIgnoreCase) ||
               GetRecordTypeName(record.RecordTypeId).Contains(SearchString, StringComparison.OrdinalIgnoreCase);
    }

    

}
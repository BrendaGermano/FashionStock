@page "/products"
@using FashionStock.WebApi.Models
@using Refit
@rendermode InteractiveServer
@inject IWebApi WebApi
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4 px-4 py-4" Style="background-color: #E3F2FD;">
    <MudCard Class="elevation-8" Style="background-color: #BBDEFB; border-radius: 12px;">
        <MudCardHeader Class="text-center">
            <MudText Typo="Typo.h5" Class="text-primary">Products Management</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField @bind-Value="SearchString" Placeholder="Search..." Adornment="Adornment.Start" AdornmentIcon="Icons.Material.Filled.Search" Class="mb-3 w-100" Style="background-color: #E3F2FD;" />

            @if (IsLoading)
            {
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            }
            else
            {
                <MudTable Items="_products" Dense="true" Hover="true" Striped="true" Filter="FilterFunc" Class="mud-table-custom">
                    <HeaderContent>
                        <MudTh><MudText Typo="Typo.subtitle2" Class="text-primary">Product Name</MudText></MudTh>
                        <MudTh><MudText Typo="Typo.subtitle2" Class="text-primary">Description</MudText></MudTh>
                        <MudTh><MudText Typo="Typo.subtitle2" Class="text-primary">Price</MudText></MudTh>
                        <MudTh><MudText Typo="Typo.subtitle2" Class="text-primary">Category</MudText></MudTh>
                        <MudTh><MudText Typo="Typo.subtitle2" Class="text-primary">Quantity</MudText></MudTh>
                        <MudTh><MudText Typo="Typo.subtitle2" Class="text-primary">Actions</MudText></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd><MudText Typo="Typo.body1">@context.Name</MudText></MudTd>
                        <MudTd><MudText Typo="Typo.body1">@context.Description</MudText></MudTd>
                        <MudTd><MudText Typo="Typo.body1">@context.Price.ToString("C")</MudText></MudTd>
                        <MudTd><MudText Typo="Typo.body1">@context.CategoryId</MudText></MudTd>
                        <MudTd><MudText Typo="Typo.body1">@context.Quantity</MudText></MudTd>
                        <MudTd>
                            <MudButton OnClick="() => NavigateDetails(context.Id)" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Info" Class="rounded-lg px-3" Style="background-color: rgba(100, 181, 246, 0.2); color: #0D47A1; font-weight: bold;">
                                Details
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudTd ColSpan="6">
                            <MudAlert Severity="Severity.Info" Variant="Variant.Outlined" Style="background-color: #E3F2FD; border-color: #64B5F6;">
                                No products available
                            </MudAlert>
                        </MudTd>
                    </NoRecordsContent>
                </MudTable>
            }
        </MudCardContent>
        <MudCardActions Class="justify-end">
            <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" Class="rounded-lg px-3" OnClick="NavigationAdd" Style="background-color: rgba(66, 165, 245, 0.8); color: #0D47A1; font-weight: bold;">
                Add Product
            </MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    private List<ProductModel> _products = new();
    private bool IsLoading = true;
    private string SearchString = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        IsLoading = true;
        try
        {
            _products = await WebApi.GetProducts();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading products: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void NavigationAdd()
    {
        NavigationManager.NavigateTo($"addproducts", true);

    }

    private void NavigateDetails(int id)

    {
        NavigationManager.NavigateTo($"/product/{id}", true);

    }

    private bool FilterFunc(ProductModel product)
    {
        if (string.IsNullOrWhiteSpace(SearchString)) return true;
        return product.Name.Contains(SearchString, StringComparison.OrdinalIgnoreCase) ||
               product.Description.Contains(SearchString, StringComparison.OrdinalIgnoreCase);
    }
}

